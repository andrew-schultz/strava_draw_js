name: Deploy Frontend

on:
  push:
    branches: [ "main" ]
    # paths:
    #   - "<your-application-directory>/**"
  workflow_dispatch:  # Allows you to run this workflow manually from the Actions tab

jobs:
  build:
    runs-on: ubuntu-latest
    environment: do
    env: 
      NEXT_PUBLIC_STRAVA_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_STRAVA_CLIENT_ID }}
      NEXT_PUBLIC_STRAVA_CLIENT_SECRET: ${{ secrets.NEXT_PUBLIC_STRAVA_CLIENT_SECRET }}
      NEXT_PUBLIC_STRAVA_ACCESS_TOKEN: ${{ secrets.NEXT_PUBLIC_STRAVA_ACCESS_TOKEN }}
      NEXT_PUBLIC_STRAVA_REFRESH_TOKEN: ${{ secrets.NEXT_PUBLIC_STRAVA_REFRESH_TOKEN }}
      NEXT_PUBLIC_STRAVA_REDIRECT_URI: ${{ secrets.NEXT_PUBLIC_STRAVA_REDIRECT_URI }}
      NEXT_PUBLIC_SIG_KEY: ${{ secrets.NEXT_PUBLIC_SIG_KEY }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Detect package manager
      id: detect-package-manager
      run: |
        if [ -f "${{ github.workspace }}/yarn.lock" ]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=yarn" >> $GITHUB_OUTPUT
          exit 0
        elif [ -f "${{ github.workspace }}/package.json" ]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
          echo "command=ci" >> $GITHUB_OUTPUT
          echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "Unable to determine package manager"
          exit 1
        fi

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: ${{ steps.detect-package-manager.outputs.manager }}

    - name: Setup Pages
      uses: actions/configure-pages@v5
      with:
        # Automatically inject basePath in your Next.js configuration file and disable
        # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
        #
        # You may remove this line if you want to manage the configuration yourself.
        static_site_generator: next

    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

    - name: Install dependencies
      run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

    - name: Create .env
      run: |
        touch .env
        echo NEXT_PUBLIC_STRAVA_CLIENT_ID="${{ secrets.NEXT_PUBLIC_STRAVA_CLIENT_ID }}" >> .env
        echo NEXT_PUBLIC_STRAVA_CLIENT_SECRET=${{ secrets.NEXT_PUBLIC_STRAVA_CLIENT_SECRET }} >> .env
        echo NEXT_PUBLIC_STRAVA_ACCESS_TOKEN=${{ secrets.NEXT_PUBLIC_STRAVA_ACCESS_TOKEN }} >> .env
        echo NEXT_PUBLIC_STRAVA_REFRESH_TOKEN=${{ secrets.NEXT_PUBLIC_STRAVA_REFRESH_TOKEN }} >> .env
        echo NEXT_PUBLIC_STRAVA_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_STRAVA_REDIRECT_URI }} >> .env
        echo NEXT_PUBLIC_SIG_KEY=${{ secrets.NEXT_PUBLIC_SIG_KEY }} >> .env
        cat .env

    - name: Build with Next.js
      run: ${{ steps.detect-package-manager.outputs.runner }} next build

    - name: Deploy to DigitalOcean droplet via SSH
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SSH_HOST_FRONTEND }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd your-nextjs-app
          ls
          git pull
          yarn install
          yarn build

          # Check if PM2 process is running
          if pm2 list | grep -q 'frontend'; then
            # Reload application to ensure zero downtime
            pm2 reload frontend
          else
            # Start the application with PM2 if not already running
            pm2 start yarn --name "frontend" -- start
          fi

          pm2 list

  # # Deployment job
  # deploy:
  #   environment:
  #     name: do
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
